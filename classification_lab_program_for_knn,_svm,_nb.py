# -*- coding: utf-8 -*-
"""Classification_Lab_Program_for_KNN,_SVM,_NB_(15_3_2023)_[RA2011030010214].ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1gNbjX--hDyZh_jfaxnZ1q1ZUmECpJukI
"""

#import libraries 
import pandas as pd
from sklearn.model_selection import train_test_split
from sklearn.neighbors import KNeighborsClassifier
from sklearn.svm import SVC
from sklearn.naive_bayes import GaussianNB
from sklearn.metrics import confusion_matrix, accuracy_score, precision_score, recall_score, f1_score, classification_report

#load the dataset
from google.colab import files
uploaded=files.upload()

#read the dataset
df=pd.read_excel("diabetes.xlsx")
df.head()

# Split the dataset into training and testing sets
X = df.iloc[:, :-1].values
y = df.iloc[:, -1].values
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=0)

# Train the KNN model
knn = KNeighborsClassifier(n_neighbors=5)
knn.fit(X_train, y_train)

# Train the SVM model
svm = SVC(kernel='linear', random_state=0)
svm.fit(X_train, y_train)

# Train the NB model
nb = GaussianNB()
nb.fit(X_train, y_train)

# Test the models
y_pred_knn = knn.predict(X_test)
y_pred_svm = svm.predict(X_test)
y_pred_nb = nb.predict(X_test)

# Display the confusion matrix
cm_knn = confusion_matrix(y_test, y_pred_knn)
cm_svm = confusion_matrix(y_test, y_pred_svm)
cm_nb = confusion_matrix(y_test, y_pred_nb)
print("Confusion Matrix for KNN:\n", cm_knn)
print("Confusion Matrix for SVM:\n", cm_svm)
print("Confusion Matrix for NB:\n", cm_nb)

# Calculate the accuracy, precision, recall, specificity and F1 Score

accuracy_knn = accuracy_score(y_test, y_pred_knn)
accuracy_svm = accuracy_score(y_test, y_pred_svm)
accuracy_nb = accuracy_score(y_test, y_pred_nb)

precision_knn = precision_score(y_test, y_pred_knn)
precision_svm = precision_score(y_test, y_pred_svm)
precision_nb = precision_score(y_test, y_pred_nb)

recall_knn = recall_score(y_test, y_pred_knn)
recall_svm = recall_score(y_test, y_pred_svm)
recall_nb = recall_score(y_test, y_pred_nb)

specificity_knn = cm_knn[0, 0] / (cm_knn[0, 0] + cm_knn[0, 1])
specificity_svm = cm_svm[0, 0] / (cm_svm[0, 0] + cm_svm[0, 1])
specificity_nb = cm_nb[0, 0] / (cm_nb[0, 0] + cm_nb[0, 1])

f1_score_knn = f1_score(y_test, y_pred_knn)
f1_score_svm = f1_score(y_test, y_pred_svm)
f1_score_nb = f1_score(y_test, y_pred_nb)

print("Accuracy:")
print("Accuracy for KNN:", accuracy_knn)
print("Accuracy for SVM:", accuracy_svm)
print("Accuracy for NB:", accuracy_nb)

print("\n")
print("Precision:")
print("Precision for KNN:", precision_knn)
print("Precision for SVM:", precision_svm)
print("Precision for NB:", precision_nb)

print("\n")
print("Recall:")
print("Recall for KNN:", recall_knn)
print("Recall for SVM:", recall_svm)
print("Recall for NB:", recall_nb)

print("\n")
print("Specificity:")
print("Specificity for KNN:", specificity_knn)
print("Specificity for SVM:", specificity_svm)
print("Specificity for NB:", specificity_nb)

print("\n")
print("F1 Score:")
print("F1 Score for KNN:", f1_score_knn)
print("F1 Score for SVM:", f1_score_svm)
print("F1 Score for NB:", f1_score_nb)